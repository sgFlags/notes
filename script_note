1. linux中shell变量$#,$@,$0,(,[的含义解释: 
变量说明: 
$$ 
Shell本身的PID（ProcessID） 
$! 
Shell最后运行的后台Process的PID 
$? 
最后运行的命令的结束代码（返回值） 
$- 
使用Set命令设定的Flag一览 
$* 
所有参数列表。如"$*"用「"」括起来的情况、以"( [ … $n"的形式输出所有参数。 
$@ 
所有参数列表。如"$@"用「"」括起来的情况、以"(" "[" … "$n" 的形式输出所有参数。 
$# 
添加到Shell的参数个数 
$0 
Shell本身的文件名 
$1～$n 
添加到Shell的各参数值。(是第1参数、[是第2参数…。 ]))])])])


2. [ -n $1 ]:即第一个参数不为null 

3. unset 可以删除变量

4. 获取字符串长度
string="abcd"
echo ${#string} #输出 4


5. 提取子字符串
以下实例从字符串第 2 个字符开始截取 4 个字符：
string="runoob is a great site"
echo ${string:1:4} # 输出 unoo


6. cut命令（字符串操作重要command)
(cut所指定的列下标从1开始计算）
https://www.cnblogs.com/Spiro-K/p/6361646.html

7. expr match $string 正则表达式 
此命令可以找到string变量从头开始和正则表达式匹配的字符串的长度，如果在正则表达式中有了小括号，则代表不打印长度，而是将和括号中正则表达式部分的匹配的字符串输出

8. 替换
%s/正则表达式/目标字符串/g
其中，%s代表全文替换，g代表


9. shell中正则表达式
http://blog.51cto.com/13466287/2065604
http://www.cnblogs.com/chengmo/archive/2010/10/10/1847287.html（不同命令所支持的正则表达式格式）

10. 字符串替换
第三种模式：${var/pattern/pattern}表示将var字符串的第一个匹配的pattern替换为另一个pattern。。        
第四种模式：${var//pattern/pattern}表示将var字符串中的所有能匹配的pattern替换为另一个pattern.

11. shell大小写敏感

12. shell中，双小括号可以写算术表达式，双中括号可以写字符串匹配之类的表达式

13. awk命令（脚本）详解
http://www.runoob.com/linux/linux-comm-awk.html
NF可以取awk每一行元素个数
awk取每行最大值示例
https://www.cnblogs.com/irockcode/p/7215461.html
awk有两个特殊参数，OFS和ORS, 可以设置输出字段分隔符和行分隔符

14. sed命令（脚本）详解
https://www.cnblogs.com/ggjucheng/archive/2013/01/13/2856901.html
sed命令用来查找、替换、删除、插入每一行数据

15. grep, awk, sed三者连用，基本就能够处理所有字符串相关的问题了

16. tr命令
即translate命令，可以将标准输入中的每一个字符都翻译
tr -d 可以删除输入中的某个字符

17. &> 代表正确输出和错误输出都重定向到后面指定的文件
2> 代表错误的输出都重定向到后面指定的文件

18. 想要利用source执行一个文件之后得到里面所设置的变量，必须使用export 来设置变量
在子shell中以及脚本中，可以得到所有此shell已经设置好的变量的值（包括环境变量）

19. 通过更改shell的PS1环境变量，可以更改shell交互界面的提示符，特殊符号包括\t，代表时间，\d，代表日期，\n，换行，\s，shell的名字，\w，当前工作目录，\W 当前工作目录的basename，
\u，用户名，\h，主机名，\\#，command number，\!，history number
如：PS1="\h:\u:\w>"
提示符会变为：bai-MS-7B92:bai:~/study/shell>

20. 0代表stdin，1代表stdout，2代表stderr，&可以代表stdout加上stderr
/dev/stdin /dev/stdout /dev/stderr是对应的三个文件
使用0,1,2的时候，读取时不需要加符号，写入时需要加上&，即2>&1代表讲错误写到stdout

21. tee命令主要是用来在命令输出到控制台的同时，将输出还保存到某个文件中
示例：cat file.txt 2>&1 | tee output.txt

